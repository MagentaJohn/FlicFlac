import mill.scalajslib.api.ModuleSplitStyle
import mill.scalajslib.api.ModuleKind
import mill.scalajslib.api.ESModuleImportMapping
import mill._, scalalib._, scalajslib._

val http4sVersion = "0.23.30"

trait AppScalaModule extends ScalaModule  {
  override def scalacOptions: T[Seq[String]] = super.scalacOptions() ++ Seq("-Xmax-inlines", "64")
  def scalaVersion = "3.6.2"
}

trait AppScalaJSModule extends AppScalaModule with ScalaJSModule {
  def scalaJSVersion = "1.18.1"
}

val circeV = "0.14.10"

// relates to directory flicflac
object flicflac extends AppScalaModule {
  def moduleDeps = Seq(shared.jvm)
  def ivyDeps = Agg(
    ivy"org.http4s::http4s-ember-server::${http4sVersion}",
    ivy"org.http4s::http4s-ember-client::${http4sVersion}",
    ivy"io.github.quafadas::frontend-routes:0.2.1"
  )

  def frontendResources = T{PathRef(client.fullLinkJS().dest.path)}

  def allClasspath = T{localClasspath() ++ Seq(frontendResources()) ++ client.resources()}

  override def assembly: T[PathRef] = T{
    Assembly.createAssembly(
      Agg.from(allClasspath().map(_.path)),
      manifest(),
      prependShellScript(),
      Some(upstreamAssembly2().pathRef.path),
      assemblyRules
    )
  }

  // def resources = Task {
  //   os.makeDir(Task.dest / "webapp")
  //   val jsPath = client.fastLinkJS().dest.path
  //   os.copy(jsPath / "main.js", Task.dest / "webapp/main.js")
  //   os.copy(jsPath / "main.js.map", Task.dest / "webapp/main.js.map")
  //   super.resources() ++ client.resources() ++ Seq(PathRef(Task.dest))
  // }

  object shared extends Module {
    trait SharedModule extends AppScalaModule with PlatformScalaModule {
      def ivyDeps = super.ivyDeps() ++ Agg(
        ivy"org.http4s::http4s-circe:${http4sVersion}",
        ivy"com.outr::scribe::3.16.0",
        ivy"io.circe::circe-core::$circeV",
        ivy"io.circe::circe-parser::$circeV",
        ivy"io.circe::circe-generic::$circeV",
      )
    }

    object jvm extends SharedModule
    object js extends SharedModule with AppScalaJSModule
  }

  object client extends AppScalaJSModule {
    override def moduleKind: T[ModuleKind] = ModuleKind.ESModule
    override def scalaJSSourceMap: T[Boolean] = true

    override def moduleSplitStyle: T[ModuleSplitStyle] = ModuleSplitStyle.SmallModulesFor(List("game"))

    def moduleDeps = Seq(shared.js)
    def ivyDeps = super.ivyDeps() ++ Agg(
      ivy"io.github.cquiroz::scala-java-time::2.5.0",
      ivy"io.github.cquiroz::scala-java-time-tzdb::2.6.0",
      ivy"org.scala-js::scalajs-dom::2.8.0",
      ivy"io.indigoengine::indigo::0.17.0",
      ivy"io.indigoengine::indigo-extras::0.17.0",
      ivy"io.indigoengine::indigo-json-circe::0.17.0",
      ivy"io.indigoengine::tyrian-indigo-bridge::0.17.0",
      ivy"io.indigoengine::tyrian::0.11.0",
      ivy"io.github.quafadas::peer-scalajs::0.0.3",
    )
    override def scalaJSImportMap: T[Seq[ESModuleImportMapping]] = Seq(
      ESModuleImportMapping.Prefix("snabdom", "https://cdn.jsdelivr.net/npm/snabbdom@3.6"),
      ESModuleImportMapping.Prefix("@peerJs/dist", "https://esm.sh/peerjs@1.5.4?bundle-deps")
    )
  }
}

def runAssembly = Task {
  val path = flicflac.assembly()
  println(path)
  os.proc("java", "-jar", path).call()
}

/* Some mill commands ...
mill __.compile
mill show flicflac.shared.jvm.sources
mill show flicflac.frontEnd.jvm.sources
mill resolve flicflac._
mill show flicflac.sources
mill show flicflac.client.sources
mill show flicflac.client.resources
mill show flicflac.shared.sources
mill resolve flicflac.shared._
mill show flicflac.shared.jvm.sources
mill show flicflac.shared.__.compile
mill show flicflac.client.compile
mill flicflac.client.fastLinkJS
*/
